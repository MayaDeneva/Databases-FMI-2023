SET SCHEMA FN2MI0700013;

--Proedure 1 which returns the city with least amount of orders
ALTER MODULE PROJ DROP PROCEDURE P_CITY_LEAST_ORDERS();
ALTER MODULE PROJ PUBLISH PROCEDURE P_CITY_LEAST_ORDERS(OUT V_CITY VARCHAR(30))
BEGIN
    DECLARE V_ORD_CNT INT DEFAULT 0;

    DECLARE C CURSOR FOR SELECT  SUBSTR(ADDRESS, LOCATE(',', ADDRESS) + 1) as city, COUNT(SUBSTR(ADDRESS, LOCATE(',', ADDRESS) + 1)) AS occurrence_count
    FROM CLIENT
    GROUP BY ADDRESS
    ORDER BY occurrence_count
    FETCH FIRST ROW ONLY ;
    OPEN C;
    FETCH C INTO V_CITY, V_ORD_CNT;
    CLOSE C;

    CALL DBMS_OUTPUT.PUT_LINE('CITY WITH LEAST AMOUNT OF ORDERS IS'  || V_CITY);
end;

BEGIN
    DECLARE P_RESULT VARCHAR(30);
    CALL FN2MI0700013.PROJ.P_CITY_LEAST_ORDERS(P_RESULT);
end;

--Procedure 2 which finds total price of order


ALTER MODULE PROJ DROP PROCEDURE P_ORDER_PRICE( TIMESTAMP(6), DECIMAL(9,2));
ALTER MODULE PROJ PUBLISH PROCEDURE P_ORDER_PRICE(IN V_DATE TIMESTAMP(6), OUT V_TOTAL_PRICE DECIMAL(9,2));
ALTER MODULE PROJ ADD PROCEDURE P_ORDER_PRICE(IN V_DATE TIMESTAMP(6), OUT V_TOTAL_PRICE DECIMAL(9,2))
BEGIN

--     DECLARE V_TOTAL_PRICE DECIMAL(9,2) DEFAULT 0;
    DECLARE V_PIZZA_PRICE DECIMAL(9,2);
    DECLARE V_DRINKS_PRICE DECIMAL(9,2);
    DECLARE V_EXTRAS_PRICE DECIMAL(9,2);
    DECLARE V_CLIENT_PHONE_NUM CHAR(12);

    SET V_PIZZA_PRICE = (SELECT SUM(P.PRICE * APO.PIZZA_QUANTITY) FROM PIZZA P, ADDPIZZATOORDER APO
                             WHERE P.PIZZA_ID = APO.PIZZA_ID
                             AND APO.ORDER = V_DATE);

    SET V_DRINKS_PRICE = (SELECT SUM(D.PRICE * ADO.DRINK_QUANTITY) FROM DRINKS D, ADDDRINKTOORDER ADO
                             WHERE D.DRINK_ID = ADO.DRINK_ID
                             AND ADO.ORDER = V_DATE);

    SET V_EXTRAS_PRICE = (SELECT SUM(P.PRICE * AXO.EXTRA_QUANTITY) FROM PRODUCTS P, ADDEXTRATOPIZZA AXO
                             WHERE P.NAME = AXO.EXTRAS_NAME
                             AND AXO.ORDER = V_DATE);
    SET V_CLIENT_PHONE_NUM = (SELECT CLIENT_PHONE_NUMBER FROM ORDER WHERE ORDER_DATE = V_DATE);
    SET V_TOTAL_PRICE = V_PIZZA_PRICE + V_DRINKS_PRICE + V_EXTRAS_PRICE;

    CALL DBMS_OUTPUT.PUT_LINE('TOTAL PRICE OF ORDER FOR CLIENT WITH PHONE NUMBER '  ||
                              V_CLIENT_PHONE_NUM || ' IS ' || V_TOTAL_PRICE);

end;

BEGIN
    DECLARE ORDER_PRICE DECIMAL(9,2);
    CALL FN2MI0700013.PROJ.P_ORDER_PRICE('2022-10-05-16.55.54.000000', ORDER_PRICE);
end;

SELECT * FROM V_ORDER_DETAILS WHERE ORDER_DATE = '2022-10-05-16.55.54.000000';
SELECT * FROM ORDER;


--Procedure 3 which finds total price of all orders
ALTER MODULE PROJ DROP PROCEDURE P_ALL_ORDERS_PRICE();
ALTER MODULE PROJ PUBLISH PROCEDURE P_ALL_ORDERS_PRICE();
ALTER MODULE PROJ ADD PROCEDURE P_ALL_ORDERS_PRICE()
BEGIN

    DECLARE V_CLIENT_PHONE CHAR(12);
    DECLARE V_ORDER_DATE TIMESTAMP(6);
    DECLARE V_ORDER_PRICE DECIMAL(9,2);
    DECLARE AT_END INTEGER DEFAULT 0;
    DECLARE R_ERROR int default 0;
    DECLARE SQLCODE INT DEFAULT 0;
    DECLARE NOT_FOUND CONDITION FOR SQLSTATE '02000';
    DECLARE C1 CURSOR FOR (SELECT CLIENT_PHONE_NUMBER, ORDER_DATE FROM ORDER);


 DECLARE CONTINUE HANDLER FOR SQLWARNING, SQLEXCEPTION, NOT FOUND
        BEGIN
             SET AT_END = 1;
            SET R_ERROR = SQLCODE;
             IF(R_ERROR != 0) THEN
                 CALL DBMS_OUTPUT.PUT_LINE('ERROR OCCURS: ' || R_ERROR);
             end if;

        END;

    OPEN C1;
    L1:
    LOOP
        FETCH C1 INTO V_CLIENT_PHONE, V_ORDER_DATE;
        IF AT_END = 1 THEN
            LEAVE L1;
        END IF;
        IF AT_END = 0 THEN
            CALL FN2MI0700013.PROJ.P_ORDER_PRICE(V_ORDER_DATE, V_ORDER_PRICE);

        END IF;
    END LOOP L1;
    CLOSE C1;

end;

CALL FN2MI0700013.PROJ.P_ALL_ORDERS_PRICE();

SELECT * FROM V_ORDER_DETAILS WHERE ORDER_DATE = '2022-10-05-16.55.54.000000';


-- SELECT * FROM V_ORDER_DETAILS;

--PROCEDURE 4 returns which drink is most frequently paired with some pizza
ALTER MODULE PROJ DROP PROCEDURE P_GOES_TOGETHER_WITH(CHAR(5));
ALTER MODULE PROJ PUBLISH PROCEDURE P_GOES_TOGETHER_WITH(IN V_PIZZAID CHAR(5));
ALTER MODULE PROJ ADD PROCEDURE P_GOES_TOGETHER_WITH(IN V_PIZZAID CHAR(5))
BEGIN
    DECLARE V_DRINK_NAME VARCHAR(30);
    DECLARE V_PIZZA_NAME VARCHAR(50);

    DECLARE C CURSOR FOR
        SELECT P.NAME ,D.NAME, SUM(ADO.DRINK_QUANTITY) AS SOLD
        FROM ADDPIZZATOORDER APO, ADDDRINKTOORDER ADO, PIZZA P, DRINKS D
        WHERE APO.ORDER = ADO.ORDER
        AND APO.PIZZA_ID = V_PIZZAID
        AND P.PIZZA_ID = V_PIZZAID
        AND D.DRINK_ID = ADO.DRINK_ID
        GROUP BY P.NAME, D.NAME
        ORDER BY SOLD DESC
        FETCH FIRST ROW ONLY;

    OPEN C;
    FETCH C INTO V_PIZZA_NAME, V_DRINK_NAME;
    CLOSE C;
    CALL DBMS_OUTPUT.PUT_LINE('Drink that goes best with pizza ' ||
                              V_PIZZA_NAME || ' is ' || V_DRINK_NAME);

END;

CALL FN2MI0700013.PROJ.P_GOES_TOGETHER_WITH('68b4f');

--PROCEDURE RETURNS PIZZAS WITH PRICE LESS THAN SOME VALUE
ALTER MODULE PROJ PUBLISH PROCEDURE P_PIZZAS_ON_BUDGET(IN MAX_PRICE DECIMAL(9,2));
ALTER MODULE PROJ ADD PROCEDURE P_PIZZAS_ON_BUDGET(IN MAX_PRICE DECIMAL(9,2))
RESULT SETS 1
BEGIN
    DECLARE C CURSOR WITH RETURN FOR SELECT NAME, PRICE, WEIGHT FROM PIZZA
                                    WHERE PRICE <= MAX_PRICE
                                    ORDER BY PRICE;
    OPEN C;
end;

CALL FN2MI0700013.PROJ.P_PIZZAS_ON_BUDGET(13.99);


CREATE OR REPLACE PROCEDURE P_YEARLY_ORDER_CNT()
RESULT SETS 1
BEGIN
    DECLARE C CURSOR WITH RETURN FOR SELECT YEAR(ORDER_DATE) AS YEAR, COUNT(*) AS ORDER_COUNT FROM ORDER
                                            GROUP BY YEAR(ORDER_DATE);

    OPEN C;

end;

CALL FN2MI0700013.P_YEARLY_ORDER_CNT();